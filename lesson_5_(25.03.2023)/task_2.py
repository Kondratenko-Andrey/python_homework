"""
Задание 2. Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


class NewClass(Exception):
    pass


def even_odd_num(my_num, even=0, odd=0):
    if my_num < 10:
        if my_num % 2 == 0:
            return even + 1, odd
        else:
            return even, odd + 1
    else:
        if my_num % 2 == 0:
            return even_odd_num(my_num // 10, even + 1, odd)
        else:
            return even_odd_num(my_num // 10, even, odd + 1)


flag = True

while flag:
    try:
        number = int(input('Введите натуральное число: '))
        if number <= 0:
            raise NewClass()
        flag = False
    except ValueError:
        print('Вы ввели не натуральное число!')
    except NewClass:
        print('Необходимо ввести натуральное число!!')

print(f'В введённом Вами числе кол-во чётных цифр: {even_odd_num(number)[0]}')
print(f'В введённом Вами числе кол-во нечётных цифр: {even_odd_num(number)[1]}')
